
# pico-sdk has a fairly unique way of building the second stage bootloader

HEADER_DIRS = . generated/pico_base pico-sdk/src/rp2_common/boot_stage2/asminclude pico-sdk/src/rp2040/hardware_regs/include pico-sdk/src/rp2_common/hardware_base/include pico-sdk/src/common/pico_base/include pico-sdk/src/boards/include pico-sdk/src/rp2_common/pico_platform/include pico-sdk/src/rp2_common/boot_stage2/include

INCLUDES = $(HEADER_DIRS:%=-I"%")

BS2_DIR = pico-sdk/src/rp2_common/boot_stage2
SRCS = $(BS2_DIR)/compile_time_choice.S
#SRCS = $(BS2_DIR)/boot2_usb_blinky.S # Usable as an alternative, will enter USB flashing mode and use ACTIVITY_LED (change it to 25) for USB activity

LDSCRIPT = pico-sdk/src/rp2_common/boot_stage2/boot_stage2.ld

MCUFLAGS = -mcpu=cortex-m0plus -mthumb

all: $(BS2_DIR)/bs2_default_padded_checksummed.S

$(BS2_DIR)/bs2_default_padded_checksummed.S: $(SRCS)
	@echo " [CC]" $^
	@/usr/bin/arm-none-eabi-gcc -DDEBUG=1 -DPICO_BOARD="pico" -DPICO_BUILD=1 -DPICO_NO_HARDWARE=0 -DPICO_ON_DEVICE=1 $(INCLUDES) $(MCUFLAGS) -Og -g -o $(BS2_DIR)/bs2_default.o -c $^
	@echo " [LD] bs2_default.elf"
	@arm-none-eabi-gcc $(MCUFLAGS) -Og -g -Wl,--build-id=none --specs=nosys.specs -nostartfiles -Wl,--script=$(LDSCRIPT) -Wl,-Map=$(BS2_DIR)/bs2_default.elf.map -o $(BS2_DIR)/bs2_default.elf $(BS2_DIR)/bs2_default.o
	@echo " [OBJCOPY] bs2_default.bin"
	@arm-none-eabi-objcopy -Obinary $(BS2_DIR)/bs2_default.elf $(BS2_DIR)/bs2_default.bin
	@echo " [pad_checksum]" $@
	@python3 $(BS2_DIR)/pad_checksum -s 0xffffffff $(BS2_DIR)/bs2_default.bin $@

.PHONY: clean

clean:
	@rm -f $(BS2_DIR)/bs2_default.o $(BS2_DIR)/bs2_default.elf.map $(BS2_DIR)/bs2_default.elf $(BS2_DIR)/bs2_default.bin $(BS2_DIR)/bs2_default_padded_checksummed.S
